memory_initialization_radix=2;
memory_initialization_vector=
; 01 - RD
; 02 - WR
; 03 - LMR(2)
; 05 - EBR
; 06 - LBR
; 07 - EPC(2)
; 09 - IPC
; 10 - LPC(2)
; 12 - ISP
; 13 - DSP
; 14 - ESP(2)
; 16 - LSP(2)
; 18 - LIR
; 19 - LMS
; 20 - LFR
; 21 - RMS
; 22 - ROR
; 23 - LOR
; 24 - SAF(3)
; 27 - SCS(2)
; 29 - EAR
; 30 - RAR
; 31 - LAR
; 32 - ERG
; 33 - LRG
; ========== RESET(0) ==========
; Reset MR[15:8], PC[15:8], BR, OR, AR and Flag Register
001101000110000000010100000011000,
; Reset MR[7:0], PC[7:0]
001000000100000000000000000010000,
; Increment PC, wait for RAM output
100000001000000100000000000000000,
; Load default SP[15:8] value from RAM
100000000000000110000000000000000,
; Load PC[7:0] value into MR[7:0]
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load default SP[7:0] value from RAM, increment PC
100000001000000100000000000000000,
; Load PC[7:0] value into MR[7:0]
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load AR from RAM, increment PC
100000001000000000000000000000100,
; Load PC[7:0] value into MR[7:0]
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load PC[7:0] and MR[7:0] with first instruction address from RAM
101000000100000000000000000000000,
; Load PC[15:8] and MR[15:8] with first instruction address from AR
001100000110000000000000000010000,
; Wait for RAM output, increment PC, reset AR
100000001000000000000000000001000,
; Load first instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== NOP(19) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== STP(25) ==========
; Reload microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== MVD(27) ==========
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== MVS(34) ==========
; Load Register Array value into AR (via ALU and SCS), update FR
000000000000000000010000000000110,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== MVI(41) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into Register Array, increment PC
100000001000000000000000000000001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== STR(50) ==========
; Load AR value into MR
001000000000000000000000000010000,
; Wait for RAM to stabilise
000000000000000000000000000000000,
; Load Register Array value into RAM
010000000000000000000000000000010,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== LOD(59) ==========
; Load AR value into MR
001000000000000000000000000010000,
; Wait for RAM output
000000000000000000000000000000000,
; Load RAM value into Register Array
100000000000000000000000000000001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== NOT(68) ==========
; Calculate and store NOT result into AR, update FR
000000000000000000010000000100110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== INC(76) ==========
; Calculate and store INC result into AR, update FR
000000000000000000010000010000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== DCR(84) ==========
; Calculate and store DCR result into AR, update FR
000000000000000000010000100000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ADA(92) ==========
; Load Register Array value into OR
000000000000000000000010000000010,
; Calculate and store ADA result into AR, update FR
000000000000000000010001100010100,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== SBA(100) ==========
; Load Register Array value into OR
000000000000000000000010000000010,
; Calculate and store SBA result into AR, update FR
000000000000000000010001110010100,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== XRA(108) ==========
; Load Register Array value into OR
000000000000000000000010000000010,
; Calculate and store XRA result into AR, update FR
000000000000000000010001010010100,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ANA(116) ==========
; Load Register Array value into OR
000000000000000000000010000000010,
; Calculate and store ANA result into AR, update FR
000000000000000000010001000010100,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ORA(124) ==========
; Load Register Array value into OR
000000000000000000000010000000010,
; Calculate and store ORA result into AR, update FR
000000000000000000010000110010100,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ADI(132) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR, increment PC
100000001000000000000010000000000,
; Calculate and store ADI result into AR, update FR
000000000000000000010001100000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== SBI(143) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR, increment PC
100000001000000000000010000000000,
; Calculate and store SBI result into AR, update FR
000000000000000000010001110000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== XRI(154) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR, increment PC
100000001000000000000010000000000,
; Calculate and store XRI result into AR, update FR
000000000000000000010001010000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ANI(165) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR, increment PC
100000001000000000000010000000000,
; Calculate and store ANI result into AR, update FR
000000000000000000010001000000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== ORI(176) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR, increment PC
100000001000000000000010000000000,
; Calculate and store ORI result into AR, update FR
000000000000000000010000110000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== JPD(187) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into PC and MR
101000000100000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== JPP(195) ==========
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into OR
100000000000000000000010000000000,
; Calculate effective address and store into AR
000000100000000000000001100000100,
; Load AR value into PC and MR
001000000100000000000000000010000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== JPR(205) ==========
; Load AR value into PC and MR
001000000100000000000000000010000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== CAD(211) ==========
; Decrement SP, load PC+1 into AR (via ALU)
000000100000100000000000010000100,
; Load SP value into MR
001000000000010000000000000000000,
; Wait for RAM to stabilise
000000000000000000000000000000000,
; Load AR value into RAM
010000000000000000000000000010000,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output
100000000000000000000000000000000,
; Load RAM value into PC and MR
101000000100000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== CAR(223) ==========
; Decrement SP
000000000000100000000000000000000,
; Load SP value into MR
001000000000010000000000000000000,
; Wait for RAM to stabilise
000000000000000000000000000000000,
; Load PC value into RAM
010000100000000000000000000000000,
; Load AR value into PC and MR
001000000100000000000000000010000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== RET(233) ==========
; Load SP value into MR
001000000000010000000000000000000,
; Wait for RAM output, increment SP
100000000001000000000000000000000,
; Load RAM value into PC and MR
101000000100000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== PSH(241) ==========
; Decrement SP
000000000000100000000000000000000,
; Load SP value into MR
001000000000010000000000000000000,
; Wait for RAM to stabilise
000000000000000000000000000000000,
; Load Register Array value into RAM
010000000000000000000000000000010,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== POP(251) ==========
; Load SP value into MR
001000000000010000000000000000000,
; Wait for RAM output, increment SP
100000000001000000000000000000000,
; Load RAM value into Register Array
100000000000000000000000000000001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== RRC(260) ==========
; Store RRC result into AR, update FR
000000000000000000010000001000110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== RLC(268) ==========
; Store RLC result into AR, update FR
000000000000000000010000001100110,
; Load AR value into Register Array
000000000000000000000000000010001,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,

; ========== FLF(276) ==========
; The following microprogram is executed when instructions
; occupying 2B and using flags have <fl>=0
; Increment PC
000000001000000000000000000000000,
; Load PC value into MR
001000100000000000000000000000000,
; Wait for RAM output, increment PC
100000001000000000000000000000000,
; Load next instruction into IR
100000000000000001000000000000000,
; Wait for decoder output
000000000000000000000000000000000,
; Load microprogram sequencer
000000000000000000100000000000000,
; Wait for microprogram memory output
000000000000000000000000000000000,
