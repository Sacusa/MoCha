memory_initialization_radix=2;
memory_initialization_vector=
; 01 - RD
; 02 - WR
; 03 - LMR(2)
; 05 - EPC(2)
; 07 - IPC
; 08 - LPC(2)
; 10 - ISP
; 11 - DSP
; 12 - ESP(2)
; 14 - LSP(2)
; 16 - LIR
; 17 - LMS
; 18 - LFR
; 19 - RMS
; 20 - ROR
; 21 - LOR
; 22 - SAF(3)
; 25 - SCS(2)
; 27 - EAR
; 28 - RAR
; 29 - LAR
; 30 - ERG
; 31 - LRG
; 32 - EBR
; 33 - LBR
; ========== RESET(0) ==========
; Reset MR, PC, OR, AR and Flag Register
0010001000000010100000011000,
; Increment PC, wait for RAM output
1000010000010000000000000000,
; Load default SP value from RAM
1000000000010000000000000000,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load first instruction address into PC and MR from RAM
1010001000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load first instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== NOP(11) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== STP(17) ==========
; Reload microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== MVD(19) ==========
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== MVS(26) ==========
; Load Register Array value into AR (via ALU and SCS), update FR
0000000000000010000000000110,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== MVI(33) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into Register Array, increment PC
1000010000000000000000000001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== STR(42) ==========
; Load AR value into MR
0010000000000000000000010000,
; Wait for RAM to stabilise
0000000000000000000000000000,
; Load Register Array value into RAM
0100000000000000000000000010,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== LOD(51) ==========
; Load AR value into MR
0010000000000000000000010000,
; Wait for RAM output
0000000000000000000000000000,
; Load RAM value into Register Array
1000000000000000000000000001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== NOT(60) ==========
; Calculate and store NOT result into AR, update FR
0000000000000010000000100110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== INC(68) ==========
; Calculate and store INC result into AR, update FR
0000000000000010000010000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== DCR(76) ==========
; Calculate and store DCR result into AR, update FR
0000000000000010000100000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ADA(84) ==========
; Load Register Array value into OR
0000000000000000010000000010,
; Calculate and store ADA result into AR, update FR
0000000000000010001100010100,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== SBA(92) ==========
; Load Register Array value into OR
0000000000000000010000000010,
; Calculate and store SBA result into AR, update FR
0000000000000010001110010100,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== XRA(100) ==========
; Load Register Array value into OR
0000000000000000010000000010,
; Calculate and store XRA result into AR, update FR
0000000000000010001010010100,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ANA(108) ==========
; Load Register Array value into OR
0000000000000000010000000010,
; Calculate and store ANA result into AR, update FR
0000000000000010001000010100,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ORA(116) ==========
; Load Register Array value into OR
0000000000000000010000000010,
; Calculate and store ORA result into AR, update FR
0000000000000010000110010100,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ADI(124) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR, increment PC
1000010000000000010000000000,
; Calculate and store ADI result into AR, update FR
0000000000000010001100000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== SBI(135) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR, increment PC
1000010000000000010000000000,
; Calculate and store SBI result into AR, update FR
0000000000000010001110000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== XRI(146) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR, increment PC
1000010000000000010000000000,
; Calculate and store XRI result into AR, update FR
0000000000000010001010000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ANI(157) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR, increment PC
1000010000000000010000000000,
; Calculate and store ANI result into AR, update FR
0000000000000010001000000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== ORI(168) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR, increment PC
1000010000000000010000000000,
; Calculate and store ORI result into AR, update FR
0000000000000010000110000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== JPD(179) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into PC and MR
1010001000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== JPP(187) ==========
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into OR
1000000000000000010000000000,
; Calculate effective address and store into AR
0001000000000000001100000100,
; Load AR value into PC and MR
0010001000000000000000010000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== JPR(197) ==========
; Load AR value into PC and MR
0010001000000000000000010000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== CAD(203) ==========
; Decrement SP, load PC+1 into AR (via ALU)
0001000001000000000010000100,
; Load SP value into MR
0010000000100000000000000000,
; Wait for RAM to stabilise
0000000000000000000000000000,
; Load AR value into RAM
0100000000000000000000010000,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output
1000000000000000000000000000,
; Load RAM value into PC and MR
1010001000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== CAR(215) ==========
; Decrement SP
0000000001000000000000000000,
; Load SP value into MR
0010000000100000000000000000,
; Wait for RAM to stabilise
0000000000000000000000000000,
; Load PC value into RAM
0101000000000000000000000000,
; Load AR value into PC and MR
0010001000000000000000010000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== RET(225) ==========
; Load SP value into MR
0010000000100000000000000000,
; Wait for RAM output, increment SP
1000000010000000000000000000,
; Load RAM value into PC and MR
1010001000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== PSH(233) ==========
; Decrement SP
0000000001000000000000000000,
; Load SP value into MR
0010000000100000000000000000,
; Wait for RAM to stabilise
0000000000000000000000000000,
; Load Register Array value into RAM
0100000000000000000000000010,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== POP(243) ==========
; Load SP value into MR
0010000000100000000000000000,
; Wait for RAM output, increment SP
1000000010000000000000000000,
; Load RAM value into Register Array
1000000000000000000000000001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== RRC(252) ==========
; Store RRC result into AR, update FR
0000000000000010000001000110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== RLC(260) ==========
; Store RLC result into AR, update FR
0000000000000010000001100110,
; Load AR value into Register Array
0000000000000000000000010001,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,

; ========== FLF(268) ==========
; The following microprogram is executed when instructions
; occupying 2B and using flags have <fl>=0
; Increment PC
0000010000000000000000000000,
; Load PC value into MR
0011000000000000000000000000,
; Wait for RAM output, increment PC
1000010000000000000000000000,
; Load next instruction into IR
1000000000001000000000000000,
; Wait for decoder output
0000000000000000000000000000,
; Load microprogram sequencer
0000000000000100000000000000,
; Wait for microprogram memory output
0000000000000000000000000000,
